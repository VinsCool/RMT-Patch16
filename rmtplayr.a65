;*************************************************************************************************;
;* RMT 1.28(1.30) Tuning Patch 16 (05-10-2021 - Beta8) by VinsCool                               *;
;* Based on RMT 1.28 Patch 8 (07-02-2015) by Analmux                                             *;
;*                                                                                               *;
;* Raster Music Tracker, RMT Atari routine version 1.20090108                                    *;
;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2009                                                  *;
;* http://raster.atari.org                                                                       *;
;*                                                                                               *;
;* Warnings:                                                                                     *;
;*                                                                                               *;
;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed                *;
;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"                  *;
;*    address for frequency tables and functionary variables. It's:                              *;
;*	  a) from PLAYER-$03c0 to PLAYER for stereo RMTplayer                                    *;
;*    b) from PLAYER-$0320 to PLAYER for mono RMTplayer                                          *;
;*                                                                                               *;
;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.               *;
;*    i.e. "PLAYER" address can be $..00 only!                                                   *;
;*                                                                                               *;
;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.                *;
;*************************************************************************************************;

; TO DO: rename many labels into stuff that makes a lot more sense later...

; Many things seem to be hardcoded to Raster Music Tracker...

FEAT_IS_TRACKER equ 0

; There are many things tightly related to RMT Visualizer exclusively, they can be skipped otherwise.

FEAT_IS_VISUALP equ 0

; Simple RMT Player is a simple recreation of the original .xex export player from RMT, with some changes

FEAT_IS_SIMPLEP equ 1

; Stereo mode definition may be defined elsewhere for easier changes, otherwise it is defined here.

        IFT FEAT_IS_VISUALP==0&&FEAT_IS_SIMPLEP==0
STEREOMODE	equ 0	; 0 => compile RMTplayer for 4 tracks mono
			; 1 => compile RMTplayer for 8 tracks stereo
			; 2 => compile RMTplayer for 4 tracks stereo L1 R2 R3 L4
			; 3 => compile RMTplayer for 4 tracks stereo L1 L2 R3 R4
			; 4 => compile RMTplayer for 8 tracks mono LR1 LR2 LR3 LR4
	EIF
	IFT STEREOMODE==1
TRACKS		equ 8
	ELS
TRACKS		equ 4
	EIF
INSTRPAR	equ 12
PLAYER		equ $3400
TABLES          equ $B000

;************************************************************************;
;* RMT FEATures definitions file                                        *;
;* For optimizations of RMT player routine to concrete RMT module only! *;
;************************************************************************;

	icl "rmt_feat.a65"

; RMT ZeroPage addresses
	                org 203
p_tis
p_instrstable	        org *+2
p_trackslbstable        org *+2
p_trackshbstable        org *+2
p_song		        org *+2
ns			org *+2
nr	        	org *+2
nt		        org *+2
reg1     	   	org *+1
reg2                    org *+1
reg3                    org *+1
tmp      		org *+1
tmp2      		org *+1
tmp3      		org *+1
v_audctl                org *+1
;	IFT STEREOMODE==1
v_audctl2               org *+1
;	EIF

; RMT Visualiser hack
        IFT FEAT_IS_VISUALP==1
v_ord			org *+1
v_frame			org *+1
v_second		org *+1
v_minute		org *+1
v_region      		org *+1
v_volume        	org *+TRACKS
; SKCTL hack for Two-Tone Filter
v_skctl			org *+1
        IFT STEREOMODE==1
v_skctl2		org *+1
        EIF
        EIF

	IFT FEAT_COMMAND2
frqaddcmd2      	org *+1
	EIF
	IFT TRACKS>4
                	org PLAYER-$400+$40
	ELS
                	org PLAYER-$400+$e0
	EIF
	
track_variables
trackn_db       	org *+TRACKS
trackn_hb       	org *+TRACKS
trackn_idx       	org *+TRACKS
trackn_pause    	org *+TRACKS
trackn_note     	org *+TRACKS
trackn_volume    	org *+TRACKS
trackn_distor    	org *+TRACKS
trackn_shiftfrq	        org *+TRACKS
	
	IFT FEAT_PORTAMENTO
trackn_portafrqc        org *+TRACKS
trackn_portafrqa        org *+TRACKS
trackn_portaspeed       org *+TRACKS
trackn_portaspeeda      org *+TRACKS
trackn_portadepth       org *+TRACKS
	EIF

trackn_instrx2  	org *+TRACKS
trackn_instrdb  	org *+TRACKS
trackn_instrhb  	org *+TRACKS
trackn_instridx  	org *+TRACKS
trackn_instrlen  	org *+TRACKS
trackn_instrlop 	org *+TRACKS
trackn_instrreachend	org *+TRACKS
trackn_volumeslidedepth org *+TRACKS
trackn_volumeslidevalue org *+TRACKS
	
	IFT FEAT_VOLUMEMIN
trackn_volumemin	org *+TRACKS
	EIF

FEAT_EFFECTS equ FEAT_EFFECTVIBRATO||FEAT_EFFECTFSHIFT
	
	IFT FEAT_EFFECTS
trackn_effdelay		org *+TRACKS
	EIF
	
	IFT FEAT_EFFECTVIBRATO
trackn_effvibratoa	org *+TRACKS
	EIF
	
	IFT FEAT_EFFECTFSHIFT
trackn_effshift		org *+TRACKS
	EIF

trackn_tabletypespeed   org *+TRACKS
	
	IFT FEAT_TABLEMODE
trackn_tablemode	org *+TRACKS
	EIF

trackn_tablenote	org *+TRACKS
trackn_tablea		org *+TRACKS
trackn_tableend		org *+TRACKS
	
	IFT FEAT_TABLEGO
trackn_tablelop		org *+TRACKS
	EIF

trackn_tablespeeda	org *+TRACKS
	
	IFT FEAT_FILTER
trackn_command		org *+TRACKS
trackn_filter		org *+TRACKS
	EIF

trackn_audf     	org *+TRACKS
trackn_audc     	org *+TRACKS

	IFT FEAT_AUDCTLMANUALSET
trackn_audctl    	org *+TRACKS
	EIF

v_aspeed		org *+1
track_endvariables

;*********************************************************************;
;* Start of the entire block for Tuning Tables, Vibrato, Volume, etc *;
;*********************************************************************;
		
	org TABLES

tabbeganddistor_64khz
	dta frqtabpure_64khz-frqtab_64khz,$00
	dta frqtabpoly5_64khz-frqtab_64khz,$20
	dta frqtabpure_64khz-frqtab_64khz,$40
	dta frqtabbuzzy_64khz-frqtab_64khz,$c0
	dta frqtabpure_64khz-frqtab_64khz,$80
	dta frqtabpure_64khz-frqtab_64khz,$a0
	dta frqtabbuzzy_64khz-frqtab_64khz,$c0
	dta frqtabgritty_64khz-frqtab_64khz,$c0 

	org TABLES+$10

tabbeganddistor_15khz
	dta frqtabpure_15khz-frqtab_15khz,$00
	dta frqtabpure_15khz-frqtab_15khz,$20
	dta frqtabpure_15khz-frqtab_15khz,$40
	dta frqtabbuzzy_15khz-frqtab_15khz,$c0
	dta frqtabpure_15khz-frqtab_15khz,$80
	dta frqtabpure_15khz-frqtab_15khz,$a0
	dta frqtabbuzzy_15khz-frqtab_15khz,$c0
	dta frqtabbuzzy_15khz-frqtab_15khz,$c0

	org TABLES+$20

tabbeganddistor_179mhz
	dta frqtabpoly5_179mhz-frqtab_179mhz,$00
	dta frqtabpoly5_179mhz-frqtab_179mhz,$20
	dta frqtabpoly5_179mhz-frqtab_179mhz,$40
	dta frqtabbuzzy_179mhz-frqtab_179mhz,$c0
	dta frqtabpoly5_179mhz-frqtab_179mhz,$80
	dta frqtabpure_179mhz-frqtab_179mhz,$a0
	dta frqtabbuzzy_179mhz-frqtab_179mhz,$c0
	dta frqtabgritty_179mhz-frqtab_179mhz,$c0

	org TABLES+$30

tabbeganddistor_16bit_lo
	dta frqtabpure_64khz-frqtab_64khz,$00
	dta frqtabpoly5_64khz-frqtab_64khz,$20
	dta frqtabpure_64khz-frqtab_64khz,$40
	dta frqtabbuzzy_64khz-frqtab_64khz,$c0
	dta frqtabpure_64khz-frqtab_64khz,$80
	dta frqtabpure_lo-frqtab_16bit,$a0
	;dta clarinet_lo-frqtab_16bit,$c0
	dta frqtabbuzzy_64khz-frqtab_64khz,$c0
	dta frqtabgritty_lo-frqtab_16bit,$c0 

	org TABLES+$40

tabbeganddistor_16bit_hi
	dta frqtabpure_64khz-frqtab_64khz,$00
	dta frqtabpoly5_64khz-frqtab_64khz,$20
	dta frqtabpure_64khz-frqtab_64khz,$40
	dta frqtabbuzzy_64khz-frqtab_64khz,$c0
	dta frqtabpure_64khz-frqtab_64khz,$80
	dta frqtabpure_hi-frqtab_16bit,$a0
	;dta clarinet_hi-frqtab_16bit,$a0
	dta frqtabbuzzy_64khz-frqtab_64khz,$c0
	dta frqtabgritty_hi-frqtab_16bit,$c0 

; Vibrato tables
        
        IFT FEAT_EFFECTVIBRATO
        org Tables+$50
	
vibtabbeg
        dta 0,vib1-vib0,vib2-vib0,vib3-vib0
vib0	dta 0
vib1	dta 1,-1,-1,1
vib2	dta 1,0,-1,-1,0,1
vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1

vibtabnext
	dta vib0-vib0+0
	dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
	dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
	dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
	EIF

; New volume Lookup Table, thanks to TakuikaNinja for helpful advices and ideas! 

	org Tables+$80

volumetab
        dta $00,$00,$00,$00,$00,$00,$00,$00
        dta $00,$00,$00,$00,$11,$11,$11,$11
        dta $00,$00,$11,$11,$11,$11,$22,$22
        dta $00,$01,$11,$11,$22,$22,$23,$33
        dta $00,$11,$11,$22,$22,$33,$33,$44
        dta $00,$11,$12,$22,$33,$34,$44,$55
        dta $00,$11,$22,$23,$34,$44,$55,$66
        dta $00,$11,$22,$33,$44,$55,$66,$77
        dta $01,$12,$23,$34,$45,$56,$67,$78
        dta $01,$12,$23,$44,$55,$67,$78,$89
        dta $01,$12,$33,$45,$56,$77,$89,$9A
        dta $01,$12,$34,$45,$67,$78,$9A,$AB
        dta $01,$22,$34,$56,$67,$89,$AA,$BC
        dta $01,$23,$34,$56,$78,$9A,$AB,$CD
        dta $01,$23,$45,$67,$78,$9A,$BC,$DE
        dta $01,$23,$45,$67,$89,$AB,$CD,$EF
	
; 64khz tables

	org Tables+$100

frqtab
	ERT [<frqtab]!=0

frqtab_64khz

; Pure Table, Slot A, Distortion A

frqtabpure_64khz
        dta $F1,$E3,$D6,$CA,$BF,$B4,$AA,$A0,$97,$8F,$87,$7F
        dta $78,$71,$6B,$65,$5F,$5A,$54,$50,$4B,$47,$43,$3F
        dta $3B,$38,$35,$32,$2F,$2C,$2A,$27,$25,$23,$21,$1F
        dta $1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
        dta $0E,$0D,$0C,$0C,$0B,$0A,$0A,$09,$09,$08,$07,$07
        dta $07,$06,$06,$05
         
; Buzzy Bass Table, Slot C, Distortion C

frqtabbuzzy_64khz
        dta $7F,$79,$73,$6C,$66,$60,$5A,$55,$F2,$E6,$D7,$CB
        dta $BF,$B6,$AA,$A1,$98,$8F,$89,$80,$7A,$71,$6B,$65
        dta $5F,$5C,$56,$50,$4D,$47,$44,$41,$3E,$38,$35,$32
        dta $2F,$2F,$29,$29,$26,$23,$20,$20,$20,$1A,$1A,$17
        dta $17,$17,$14,$14,$11,$11,$11,$11,$11,$0B,$0B,$0B
        dta $0B,$0B,$0B,$08

; Gritty Bass Table, Slot E, Distortion C

frqtabgritty_64khz 
        dta $FF,$F3,$E4,$D8,$CD,$C0,$B5,$AB,$A2,$99,$91,$88
        dta $7F,$79,$73,$6C,$66,$60,$5A,$55,$51,$4C,$48,$43
        dta $3F,$3C,$39,$34,$33,$30,$2D,$2A,$28,$25,$24,$21
        dta $1F,$1E,$1C,$50,$19,$47,$16,$15,$3E,$12,$35,$10
        dta $0F,$0F,$0D,$0D,$0C,$23,$0A,$0A,$0A,$1A,$1A,$07
        dta $07,$07,$06,$06
        
; Crunchy Bass Table, Slot 2, Distortion 2

frqtabpoly5_64khz

        dta $3E,$3A,$37,$33,$30,$2E,$2B,$29,$26,$24,$22,$20
        dta $1F,$1C,$1B,$19,$18,$16,$15,$14,$13,$12,$10,$10
        dta $0F,$0E,$0D,$0C,$0B,$0B,$0A,$09,$09,$08,$08,$07
        dta $07,$06,$06,$06,$05,$05,$05,$04,$04,$04,$03,$03
        dta $03,$03,$02,$02,$02,$02,$02,$02,$01,$01,$01,$01
        dta $00,$00,$00,$00

; 15khz tables

	org Tables+$200

frqtab_15khz

; Pure Table, Slot A, Distortion A

frqtabpure_15khz
        dta $ED,$DF,$D2,$C7,$BB,$B1,$A7,$9D,$95,$8C,$84,$7D
        dta $76,$6F,$69,$63,$5D,$58,$53,$4E,$4A,$45,$42,$3E
        dta $3A,$37,$34,$31,$2E,$2B,$29,$27,$24,$22,$20,$1E
        dta $1D,$1B,$1A,$18,$17,$15,$14,$13,$12,$11,$10,$0F
        dta $0E,$0D,$0C,$0C,$0B,$0A,$0A,$09,$08,$08,$07,$07
        dta $06,$06,$06,$05

; Buzzy Bass Table, Slot C, Distortion C

frqtabbuzzy_15khz

        dta $BC,$B2,$A8,$9E,$96,$8D,$85,$7E,$76,$70,$6A,$64
        dta $5F,$58,$53,$4E,$4B,$46,$42,$3E,$3A,$37,$34,$32
        dta $2E,$2B,$29,$26,$25,$23,$21,$1F,$1C,$1B,$1A,$19
        dta $17,$16,$15,$14,$12,$11,$10,$0F,$0D,$0D,$0C,$0C
        dta $0B,$0A,$0A,$0A,$08,$08,$07,$07,$06,$06,$06,$05
        dta $05,$05,$05,$03

; 1.79mhz tables

	org Tables+$300

frqtab_179mhz

; Poly5 Table, Slot 2, Distortion 2

frqtabpoly5_179mhz

        dta $D7,$CA,$BE,$B3,$A9,$9F,$96,$8D,$85,$7E,$77,$70
        dta $69,$63,$5E,$58,$53,$4E,$49,$45,$41,$3D,$39,$36
        dta $32,$2F,$2D,$2A,$27,$25,$23,$20,$1E,$1D,$1A,$19
        dta $17,$16,$14,$13,$12,$11,$0F,$0E,$0D,$0C,$0B,$0A
        dta $0A,$09,$08,$07,$07,$06,$06,$05,$05,$04,$04,$03
        dta $03,$02,$02,$02

; Pure Table, Slot A, Distortion A

frqtabpure_179mhz

        dta $CF,$C4,$B8,$AE,$A4,$9A,$92,$89,$81,$7A,$73,$6C
        dta $66,$60,$5A,$55,$50,$4B,$47,$43,$3F,$3B,$37,$34

; Poly4 Buzzy Table, Slot C, Distortion C

frqtabbuzzy_179mhz

        dta $6C,$69,$61,$5A,$55,$FE,$E6,$DA,$D1,$C5,$B9,$AD
        dta $A4,$9B,$95,$89,$80,$7A,$71,$6E,$68,$62,$5C,$53
        dta $50,$4D,$4A,$44,$3E,$3B,$35,$32,$32,$2F,$2C,$26
        dta $26

; Poly4 Gritty Table, Slot E, Distortion C

frqtabgritty_179mhz

        dta $DC,$D0,$C6,$BB,$AF,$A5,$9D,$91,$8A,$82,$7B,$73
        dta $6C,$69,$61,$5A,$55,$52,$4B,$46,$43,$3F,$3C,$37
        dta $34,$31,$2D,$2B,$28,$27,$25,$22,$21,$1E,$1C,$19
        dta $18,$16,$16,$13,$12,$12,$0F,$0F,$0D,$0D,$0C,$0A
        dta $0A

; 16-Bit Table

	org Tables+$400

frqtab_16bit

; Pure Table, 16-bit lo, Slot A, Distortion A

frqtabpure_lo
        dta $B0,$C1,$27,$DE,$E1,$2B,$B9,$87,$92,$D5,$4E,$F9
        dta $D5,$DD,$10,$6C,$ED,$92,$59,$40,$45,$67,$A3,$F9
        dta $67,$EB,$85,$32,$F3,$C6,$A9,$9D,$9F,$B0,$CE,$F9
        dta $30,$72,$BF,$16,$76,$DF,$51,$CB,$4C,$D4,$64,$F9
        dta $94,$36,$DC,$87,$37,$EC,$A5,$62,$23,$E7,$AE,$79
        dta $47,$17,$EA,$C0

; Pure Table, 16-bit hi, Slot A, Distortion A
        
frqtabpure_hi
        dta $69,$63,$5E,$58,$53,$4F,$4A,$46,$42,$3E,$3B,$37
        dta $34,$31,$2F,$2C,$29,$27,$25,$23,$21,$1F,$1D,$1B
        dta $1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D
        dta $0D,$0C,$0B,$0B,$0A,$09,$09,$08,$08,$07,$07,$06
        dta $06,$06,$05,$05,$05,$04,$04,$04,$04,$03,$03,$03
        dta $03,$03,$02,$02 

; Gritty Bass Table, 16-bit lo. Slot E, Distortion C

frqtabgritty_lo

        dta $3A,$6C,$AC,$F5,$49,$A7,$0F,$8A,$F4,$71,$F9,$86
        dta $26,$B2,$51,$F7,$A1,$50,$04,$BC,$75,$35,$F9,$C0
        dta $8A,$57,$27,$F8,$CD,$A4,$7D,$59,$37,$17,$F9,$DB
        dta $C2,$A8,$8F,$78,$63,$4E,$3B,$29,$18,$08,$F9,$EB
        dta $DC,$CF,$C4,$B8,$AE,$A2,$9A,$91,$87,$81,$79,$72
        dta $6A,$64,$5E,$5A

; Gritty Bass Table, 16-bit hi. Slot E, Distortion C

frqtabgritty_hi

        dta $0E,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07
        dta $07,$06,$06,$05,$05,$05,$05,$04,$04,$04,$03,$03
        dta $03,$03,$03,$02,$02,$02,$02,$02,$02,$02,$01,$01
        dta $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
        dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        dta $00,$00,$00,$00


;;;;;;;;;;;;;;;;
; extra tables ;
;;;;;;;;;;;;;;;;
 
; Distortion C, 1.79mhz, Clarinet Lo, exclusive to PoP

clarinet_lo
        ;dta $E2,$D6,$06,$63,$FC,$95,$5B,$30,$41,$70,$BD,$FB
        ;dta $75,$EF,$96,$5B,$F3,$E5,$9B,$AB,$9D,$BC,$DB,$FA
        ;dta $19,$74,$CF,$1B,$76,$D1,$59,$B4,$4B,$D3,$6A,$F2
        ;dta $89,$4D,$E4,$7B,$3F,$03,$9A,$5E,$22,$E6,$AA,$7D
        ;dta $41,$14,$E7,$BA,$9C,$7E,$42,$24,$06,$F2,$D9,$BB
        ;dta $9D,$8E,$70,$61 
        
; Distortion A, Reverse-16, Clarinet Hi, exclusive to PoP

clarinet_hi
        ;dta $34,$31,$2F,$2C,$29,$27,$25,$23,$21,$1F,$1D,$1B
        ;dta $1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D
        ;dta $0D,$0C,$0B,$0B,$0A,$09,$09,$08,$08,$07,$07,$06
        ;dta $06,$06,$05,$05,$05,$05,$04,$04,$04,$03,$03,$03
        ;dta $03,$03,$02,$02,$02,$02,$02,$02,$02,$01,$01,$01
        ;dta $01,$01,$01,$01

;***************************;
;* Set of RMT main vectors *;
;***************************;

        org PLAYER
	
RASTERMUSICTRACKER
	jmp rmt_init
	jmp rmt_play
	jmp rmt_p3
	jmp rmt_silence
	jmp SetPokey
	IFT FEAT_SFX
	jmp rmt_sfx	;* A=note(0,..,60),X=channel(0,..,3 or 0,..,7),Y=instrument*2(0,2,4,..,126)
	EIF

rmt_init
	stx ns
	sty ns+1
	IFT FEAT_NOSTARTINGSONGLINE==0
	pha
	EIF
	IFT track_endvariables-track_variables>255
	ldy #0
	tya

ri0	sta track_variables,y
	sta track_endvariables-$100,y
	iny
	bne ri0
	ELS
	ldy #track_endvariables-track_variables
	lda #0

ri0	sta track_variables-1,y
	dey
	bne ri0
	EIF
	ldy #4
	lda (ns),y
	sta v_maxtracklen
	iny
	IFT FEAT_CONSTANTSPEED==0
	lda (ns),y
	sta v_speed
	EIF
	IFT FEAT_INSTRSPEED==0
	iny
	lda (ns),y
	sta v_instrspeed
	sta v_ainstrspeed
	ELI FEAT_INSTRSPEED>1
	lda #FEAT_INSTRSPEED
	sta v_ainstrspeed
	EIF
	ldy #8

ri1	lda (ns),y
	sta p_tis-8,y
	iny
	cpy #8+8
	bne ri1
	IFT FEAT_NOSTARTINGSONGLINE==0
	pla
	pha
	IFT TRACKS>4
	asl @
	asl @
	asl @
	clc
	adc p_song
	sta p_song
	pla
	php
	and #$e0
	asl @
	rol @
	rol @
	rol @
	ELS
	asl @
	asl @
	clc
	adc p_song
	sta p_song
	pla
	php
	and #$c0
	asl @
	rol @
	rol @
	EIF
	plp
	adc p_song+1
	sta p_song+1
	EIF
	jsr GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3

rmt_silence
	IFT STEREOMODE>0
	lda #0
	sta $d208
	sta $d218
	ldy #3   ; when stereo, same as below applies
	sty $d20f
	sty $d21f
        
        IFT FEAT_IS_VISUALP==1
        sty v_skctl
        
        IFT STEREOMODE==1
        sty v_skctl2
	EIF
	EIF
	
	ldy #8

si1	sta $d200,y
	sta $d210,y
	dey
	bpl si1
	
	ELS
	lda #0
	sta $d208
	ldy #3   ; set to #3 for normal mode, #$8B will enable Two-Tone permanently
	sty $d20f

        IFT FEAT_IS_VISUALP==1
	sty v_skctl
	EIF

	ldy #8

si1	sta $d200,y
	dey
	bpl si1
	EIF
	IFT FEAT_INSTRSPEED==0
	lda v_instrspeed
	ELS
	lda #FEAT_INSTRSPEED
	EIF
	rts

GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
GetSongLine
	ldx #0
	stx v_abeat

; RMT Visualiser hack

nn0
        IFT FEAT_IS_VISUALP
	lda p_song
	sub MODUL+14
	sta v_ord
	lda p_song+1
	sbc MODUL+15
	lsr @
	ror v_ord
	lsr @
	ror v_ord
	IFT TRACKS>4
	lsr @
	ror v_ord
	EIF
	EIF
	IFT FEAT_IS_SIMPLEP&&EXPORTOBX
	lda loop+1
	add #16
	sta loop+1              ; change the rasterbar colour every pattern played
	EIF

nn1	txa
	tay
	lda (p_song),y
	cmp #$fe
	bcs nn2
	tay
	lda (p_trackslbstable),y
	sta trackn_db,x
	lda (p_trackshbstable),y

nn1a sta trackn_hb,x
	lda #0
	sta trackn_idx,x
	lda #1

nn1a2 sta trackn_pause,x
	lda #$80
	sta trackn_instrx2,x
	inx

xtracks01	cpx #TRACKS
	bne nn1
	lda p_song
	clc

xtracks02	adc #TRACKS
	sta p_song
	bcc GetTrackLine
	inc p_song+1

nn1b
	jmp GetTrackLine

nn2
	beq nn3

nn2a
	lda #0
	beq nn1a2

nn3
	ldy #2
	lda (p_song),y
	tax
	iny
	lda (p_song),y
	sta p_song+1
	stx p_song
	ldx #0
	beq nn0

GetTrackLine
oo0
oo0a
	IFT FEAT_CONSTANTSPEED==0
	lda #$ff

v_speed equ *-1
	sta v_bspeed
	EIF
	ldx #-1

oo1
	inx
	dec trackn_pause,x
	bne oo1x

oo1b
	lda trackn_db,x
	sta ns
	lda trackn_hb,x
	sta ns+1

oo1i
	ldy trackn_idx,x
	inc trackn_idx,x
	lda (ns),y
	sta reg1
	and #$3f
	cmp #61
	beq oo1a
	bcs oo2
	sta trackn_note,x
	iny
	lda (ns),y
	lsr @
	and #$3f*2
	sta trackn_instrx2,x

oo1a
	lda #1
	sta trackn_pause,x
	ldy trackn_idx,x
	inc trackn_idx,x
	lda (ns),y
	lsr @
	ror reg1
	lsr @
	ror reg1
	lda reg1
	IFT FEAT_GLOBALVOLUMEFADE
	sec
	sbc #$00

RMTGLOBALVOLUMEFADE equ *-1
	bcs voig
	lda #0

voig
	EIF
	and #$f0
	sta trackn_volume,x

oo1x

xtracks03sub1	cpx #TRACKS-1
	bne oo1
	IFT FEAT_CONSTANTSPEED==0
	lda #$ff

v_bspeed equ *-1
	sta v_speed
	ELS
	lda #FEAT_CONSTANTSPEED
	EIF
	sta v_aspeed
	jmp InitOfNewSetInstrumentsOnly

oo2
	cmp #63
	beq oo63
	lda reg1
	and #$c0
	beq oo62_b
	asl @
	rol @
	rol @
	sta trackn_pause,x
	jmp oo1x

oo62_b
	iny
	lda (ns),y
	sta trackn_pause,x
	inc trackn_idx,x
	jmp oo1x

oo63
	lda reg1
	IFT FEAT_CONSTANTSPEED==0
	bmi oo63_1X
	iny
	lda (ns),y
	sta v_bspeed
	inc trackn_idx,x
	jmp oo1i

oo63_1X
	EIF
	cmp #255
	beq oo63_11
	iny
	lda (ns),y
	sta trackn_idx,x
	jmp oo1i

oo63_11
	jmp GetSongLine

p2xrmtp3	jmp rmt_p3

p2x0 dex
	 bmi p2xrmtp3

InitOfNewSetInstrumentsOnly

p2x1    ldy trackn_instrx2,x
	bmi p2x0
	IFT FEAT_SFX
	jsr SetUpInstrumentY2
	jmp p2x0

rmt_sfx
	sta trackn_note,x
	lda #$f0				;* sfx note volume*16

RMTSFXVOLUME equ *-1		;* label for sfx note volume parameter overwriting
	sta trackn_volume,x
	EIF

SetUpInstrumentY2
	lda (p_instrstable),y
	sta trackn_instrdb,x
	sta nt
	iny
	lda (p_instrstable),y
	sta trackn_instrhb,x
	sta nt+1
	IFT FEAT_FILTER
	lda #1
	sta trackn_filter,x
	EIF
	IFT FEAT_TABLEGO
	IFT FEAT_FILTER
	tay
	ELS
	ldy #1
	EIF
	lda (nt),y
	sta trackn_tablelop,x
	iny
	ELS
	ldy #2
	EIF
	lda (nt),y
	sta trackn_instrlen,x
	iny
	lda (nt),y
	sta trackn_instrlop,x
	iny
	lda (nt),y
	sta trackn_tabletypespeed,x
	IFT FEAT_TABLETYPE||FEAT_TABLEMODE
	and #$3f
	EIF
	sta trackn_tablespeeda,x
	IFT FEAT_TABLEMODE
	lda (nt),y
	and #$40
	sta trackn_tablemode,x
	EIF
	IFT FEAT_AUDCTLMANUALSET
	iny
	lda (nt),y
	sta trackn_audctl,x
	iny
	ELS
	ldy #6
	EIF
	lda (nt),y
	sta trackn_volumeslidedepth,x
	IFT FEAT_VOLUMEMIN
	iny
	lda (nt),y
	sta trackn_volumemin,x
	IFT FEAT_EFFECTS
	iny
	EIF
	ELS
	IFT FEAT_EFFECTS
	ldy #8
	EIF
	EIF
	IFT FEAT_EFFECTS
	lda (nt),y
	sta trackn_effdelay,x
	IFT FEAT_EFFECTVIBRATO
	iny
	lda (nt),y
	tay
	lda vibtabbeg,y
	sta trackn_effvibratoa,x
	EIF
	IFT FEAT_EFFECTFSHIFT
	ldy #10
	lda (nt),y
	sta trackn_effshift,x
	EIF
	EIF
	lda #128
	sta trackn_volumeslidevalue,x
	sta trackn_instrx2,x
	asl @
	sta trackn_instrreachend,x
	sta trackn_shiftfrq,x
	tay
	lda (nt),y
	sta trackn_tableend,x
	adc #0
	sta trackn_instridx,x
	lda #INSTRPAR
	sta trackn_tablea,x
	tay
	lda (nt),y
	sta trackn_tablenote,x

xata_rtshere
	IFT FEAT_SFX||FEAT_IS_TRACKER
	rts ; a rts is mandatory for the 'tracker.obx' binary, else a lot of things break in RMT!
	ELS
	jmp p2x0
	EIF

rmt_play

rmt_p0
	jsr SetPokey
rmt_p1
	IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
	dec v_ainstrspeed
	bne rmt_p3
	EIF
	IFT FEAT_INSTRSPEED==0
	lda #$ff

v_instrspeed	equ *-1
	sta v_ainstrspeed
	ELI FEAT_INSTRSPEED>1
	lda #FEAT_INSTRSPEED
	sta v_ainstrspeed
	EIF

rmt_p2
	dec v_aspeed
	bne rmt_p3
	inc v_abeat
	lda #$ff

v_abeat equ *-1
	cmp #$ff

v_maxtracklen equ *-1
	beq p2o3
	jmp GetTrackLine

p2o3
	jmp GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3

go_ppnext	jmp ppnext

rmt_p3

xtracks05sub1	ldx #TRACKS-1

pp1
	lda trackn_instrhb,x
	beq go_ppnext
	sta ns+1
	lda trackn_instrdb,x
	sta ns
	ldy trackn_instridx,x
	lda (ns),y
	sta reg1
	iny
	lda (ns),y
	sta reg2
	iny
	lda (ns),y
	sta reg3
	iny
	tya
	cmp trackn_instrlen,x
	bcc pp2
	beq pp2
	lda #$80
	sta trackn_instrreachend,x

pp1b
	lda trackn_instrlop,x

pp2	sta trackn_instridx,x
	lda reg1
	IFT TRACKS>4
	cpx #4
	bcc pp2s
	:4 lsr @
        EIF
pp2s
	and #$0F
	ora trackn_volume,x     ; new volume lookup table method, special thanks to TakuikaNinja for the help!
	lsr @                   ; divide the pointer by 2, since only 128 bytes are used for the table
	tay                     ; it also shifts bit 0 into the carry flag (0 - even, 1 - odd)
        lda volumetab,y         ; original volume code from a 256 bytes lookup table
        bcc pp2seven            ; carry flag has been maintained since the LSR

pp2sodd 
        and #$0F                ; clear the leftmost nybble, then continue like normal from here
        jmp pp2scont

pp2seven        
        :4 lsr @                ; shift the leftmost nybble down, then continue like normal from here

; Start of hijack mess... again

pp2scont
        sta tmp                 ; backup the volume value
	lda reg2
	tay
	and #$0e                ; clear everything but the RMT slot value
	sta tmp2                ; temporary backup
	stx tmp3                ; index backup
pp2scont_a
	tya
	and #$70                ; clear distortion and other bits
	cmp #$70                ; command 7? must be equal to #$70 ONLY
	bne hijack_start        ; nope, continue like normal
	lda reg3                ; temporary XY parameter in memory
	cmp #$FC                ; failsafe -> Volume Only Mode value or SKCTL toggle
	bcs hijack_start        ; skip overwriting trackn_audctl if anything is detected
	sta trackn_audctl,x     ; store in memory and overwrite the previous value
        tay                     ; backup to index y for quick transfer between steps
pp2scont_b
        cpx #4                  ; 0-3 Left POKEY, 4-7 Right POKEY
        bcc hijack_p0           ; less than 4, continue
        jmp hijack_start_a      ; index manipulation ahead

hijack_start	
        lda trackn_audctl,x     ; workaround tentative... if not 0, it may have the wanted value...
        cpx #4                  ; 0-3 Left POKEY, 4-7 Right POKEY
        bcc hijack_start_b      ; less than 4
        ora v_audctl2           ; Right POKEY AUDCTL value
        tay                     ; backup to index y for quick transfer between steps
hijack_start_a
        txa                     ; copy index x to accumulator
        sub #4                  ; substract 4 from it, for easier checks with Right POKEY channels
        tax
	tya                     ; get tmp2 back to accumulator   
	jmp hijack_p0           ; continue
hijack_start_b
        ora v_audctl            ; the old value will be combined to the new one, at worst, it will be 1 frame late
        tay                     ; backup to index y for quick transfer between steps    

hijack_p0
        and #$08                ; join 3+4?
        beq hijack_p2           ; nope, skip to the next step
        tya                     ; get the AUDCTL backup in the accumulator
        and #$20                ; 1.79mhz ch3?
        beq hijack_p3           ; nope, skip to the next step
        cpx #$03                ; channel 4?
        beq hijack_p10          ; yes, jump straight to the next part
        cpx #$02                ; channel 3?
        beq hijack_p11          ; yes, jump straight to the next part
        bne hijack_p3           ; failsafe in case nothing is matching, 1.79mhz was checked already

hijack_p2
        tya                     ; get the AUDCTL backup in the accumulator
        and #$20                ; 1.79mhz ch3?
        beq hijack_p3           ; nope, skip to the next step
        cpx #$02                ; channel 3?
        beq hijack_p8           ; yes, jump straight to the next part

hijack_p3
        tya                     ; get the AUDCTL backup in the accumulator
        and #$10                ; join 1+2?
        beq hijack_p4           ; nope, skip to the next step
        tya                     ; get the AUDCTL backup in the accumulator
        and #$40                ; 1.79mhz ch1?
        beq hijack_p6           ; nope, skip to the next step
        cpx #$01                ; channel 2?
        beq hijack_p10          ; yes, jump straight to the next part
        cpx #$00                ; channel 1?
        beq hijack_p11          ; yes, jump straight to the next part
        bne hijack_p6           ; failsafe in case nothing is matching, 1.79mhz was checked already

hijack_p4
        tya                     ; get the AUDCTL backup in the accumulator
        and #$40                ; 1.79mhz ch1?
        beq hijack_p6           ; nope, skip to the next step
        cpx #$00                ; channel 1?
        beq hijack_p8           ; yes, jump straight to the next part

hijack_p6 
        tya                     ; get the AUDCTL backup in the accumulator
        ldy tmp2                ; load the RMT slot backup in index y
        and #$01                ; 15khz?
        beq no_hijack           ; nope, skip the entire hijack process

; 15khz tables

hijack_p7
	lda #>frqtab_15khz                   ; hijack the pointer for lookup tables to load
	sta nr+1                             ; write the high byte in memory
	lda tabbeganddistor_15khz,y          ; 15khz tables map
	sta nr                               ; write the low byte in memory
	lda tmp                              ; volume value backup
	ora tabbeganddistor_15khz+1,y	     ; combine with the distortion from the tables map
        jmp pp2scont_finished                ; done, finish the hijack

; 1.79mhz tables

hijack_p8
	ldy tmp2                             ; load the RMT slot value
	lda #>frqtab_179mhz                  ; hijack the pointer for lookup tables to load
	sta nr+1                             ; write the high byte in memory
	lda tabbeganddistor_179mhz,y         ; 1.79mhz tables map
	sta nr                               ; write the low byte in memory
	lda tmp                              ; volume value backup
	ora tabbeganddistor_179mhz+1,y	     ; combine with the distortion from the tables map
        jmp pp2scont_finished                ; done, finish the hijack

; 16-bit tables, high byte

hijack_p10	
	ldy tmp2                             ; load the RMT slot value
	lda #>frqtab_16bit                   ; hijack the pointer for lookup tables to load
	sta nr+1                             ; write the high byte in memory
	lda tabbeganddistor_16bit_hi,y       ; 16-bit high byte tables map
	sta nr                               ; write the low byte in memory
        lda tmp                              ; volume value backup
	ora tabbeganddistor_16bit_hi+1,y     ; combine with the distortion from the tables map
        jmp pp2scont_finished                ; done, finish the hijack

; 16-bit tables, low byte

hijack_p11
	ldy tmp2                             ; load the RMT slot value
	lda #>frqtab_16bit                   ; hijack the pointer for lookup tables to load
	sta nr+1                             ; write the high byte in memory
	lda tabbeganddistor_16bit_lo,y       ; 16-bit low byte tables map
	sta nr                               ; write the low byte in memory
        ;lda tmp                              ; volume value backup, PoP exclusive hack
        ;ora #$C0                             ; distorion C, PoP exclusive hack       
        lda #0                               ; volume and distortion 0, since this channel will be muted
        jmp pp2scont_finished                ; done, finish the hijack

; back to the original RMT code by Raster, nothing is hijacked

no_hijack
	lda #>frqtab_64khz
	sta nr+1
	lda tabbeganddistor_64khz,y
	sta nr
	lda tmp
	ora tabbeganddistor_64khz+1,y	

pp2scont_finished
	ldx tmp3                             ; reload the real index value
	sta trackn_audc,x                    ; write the new combined value in memory

; End of hijack mess, fucking stereo code was branching too far out of the intended range... I hope this works anyway.

InstrumentsEffects
	IFT FEAT_EFFECTS
	lda trackn_effdelay,x
	beq ei2
	cmp #1
	bne ei1
	lda trackn_shiftfrq,x
	IFT FEAT_EFFECTFSHIFT
	clc
	adc trackn_effshift,x
	EIF
	IFT FEAT_EFFECTVIBRATO
	clc
	ldy trackn_effvibratoa,x
	adc vib0,y
	EIF
	sta trackn_shiftfrq,x
	IFT FEAT_EFFECTVIBRATO
	lda vibtabnext,y
	sta trackn_effvibratoa,x
	EIF
	jmp ei2
ei1
	dec trackn_effdelay,x
ei2
	EIF
	ldy trackn_tableend,x
	cpy #INSTRPAR+1
	bcc ei3
	lda trackn_tablespeeda,x
	bpl ei2f
ei2c
	tya
	cmp trackn_tablea,x
	bne ei2c2
	IFT FEAT_TABLEGO
	lda trackn_tablelop,x
	ELS
	lda #INSTRPAR
	EIF
	sta trackn_tablea,x
	bne ei2a
ei2c2
	inc trackn_tablea,x
ei2a
	lda trackn_instrdb,x
	sta nt
	lda trackn_instrhb,x
	sta nt+1
	ldy trackn_tablea,x
	lda (nt),y
	IFT FEAT_TABLEMODE
	ldy trackn_tablemode,x
	beq ei2e
	clc
	adc trackn_tablenote,x
ei2e
	EIF
	sta trackn_tablenote,x
	lda trackn_tabletypespeed,x
	IFT FEAT_TABLETYPE||FEAT_TABLEMODE
	and #$3f
	EIF
ei2f
	sec
	sbc #1
	sta trackn_tablespeeda,x
ei3
	lda trackn_instrreachend,x
	bpl ei4
	lda trackn_volume,x
	beq ei4
	IFT FEAT_VOLUMEMIN
	cmp trackn_volumemin,x
	beq ei4
	bcc ei4
	EIF
	tay
	lda trackn_volumeslidevalue,x
	clc
	adc trackn_volumeslidedepth,x
	sta trackn_volumeslidevalue,x
	bcc ei4
	tya
	sbc #16
	sta trackn_volume,x
ei4
	IFT FEAT_COMMAND2
	lda #0
	sta frqaddcmd2
	EIF
	IFT FEAT_COMMAND1||FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
	lda reg2
	IFT FEAT_FILTER
	sta trackn_command,x
	EIF
	and #$70
	IFT 1==[FEAT_COMMAND1+FEAT_COMMAND2+FEAT_COMMAND3+FEAT_COMMAND4+FEAT_COMMAND5+FEAT_COMMAND6+[FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY]]
	beq cmd0
	ELS
	lsr @
	lsr @
	sta jmx+1

jmx	bcc *
	jmp cmd0
	nop
	jmp cmd1
	IFT FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
	nop
	jmp cmd2
	EIF
	IFT FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
	nop
	jmp cmd3
	EIF
	IFT FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
	nop
	jmp cmd4
	EIF
	IFT FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
	nop
	jmp cmd5
	EIF
	IFT FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
	nop
	jmp cmd6
	EIF
	IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
	nop
	jmp cmd7
	EIF
	EIF
	ELS
	IFT FEAT_FILTER
	lda reg2
	sta trackn_command,x
	EIF
	EIF

cmd1
	IFT FEAT_COMMAND1
	lda reg3
	jmp cmd0c
	EIF

cmd2
	IFT FEAT_COMMAND2
	lda reg3
	sta frqaddcmd2
	lda trackn_note,x
	jmp cmd0a
	EIF

cmd3
	IFT FEAT_COMMAND3
	lda trackn_note,x
	clc
	adc reg3
	sta trackn_note,x
	jmp cmd0a
	EIF

cmd4
	IFT FEAT_COMMAND4
	lda trackn_shiftfrq,x
	clc
	adc reg3
	sta trackn_shiftfrq,x
	lda trackn_note,x
	jmp cmd0a
	EIF

cmd5
	IFT FEAT_COMMAND5&&FEAT_PORTAMENTO
	IFT FEAT_TABLETYPE
	lda trackn_tabletypespeed,x
	bpl cmd5a1
	ldy trackn_note,x
	lda (nr),y
	clc
	adc trackn_tablenote,x
	jmp cmd5ax
	EIF

cmd5a1
	lda trackn_note,x
	clc
	adc trackn_tablenote,x
	cmp #61
	bcc cmd5a2
	lda #63

cmd5a2
	tay
	lda (nr),y

cmd5ax
	sta trackn_portafrqc,x
	ldy reg3
	bne cmd5a
	sta trackn_portafrqa,x

cmd5a
	tya
	lsr @
	lsr @
	lsr @
	lsr @
	sta trackn_portaspeed,x
	sta trackn_portaspeeda,x
	lda reg3
	and #$0f
	sta trackn_portadepth,x
	lda trackn_note,x
	jmp cmd0a
	ELI FEAT_COMMAND5
	lda trackn_note,x
	jmp cmd0a
	EIF

cmd6
	IFT FEAT_COMMAND6&&FEAT_FILTER
	lda reg3
	clc
	adc trackn_filter,x
	sta trackn_filter,x
	lda trackn_note,x
	jmp cmd0a
	ELI FEAT_COMMAND6
	lda trackn_note,x
	jmp cmd0a
	EIF

cmd7
	IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
	IFT FEAT_COMMAND7SETNOTE
	lda reg3
	IFT FEAT_COMMAND7VOLUMEONLY
	cmp #$FF ; FF is unlikely with AUDCTL in normal situation
	beq cmd7a
	cmp #$FE ; FE is unlikely with AUDCTL in normal situation
	beq cmd7c
	cmp #$FD ; FD is unlikely with AUDCTL in normal situation
	bne cmd7f ; failsafe if no values are matching
cmd7b	; disable Two-Tone Filter
	lda #3
	bne cmd7d ; unconditional
cmd7c	; toggle Two-Tone Filter
	lda #$8B
cmd7d
	cpx #4
	bcc cmd7e ; less than 4
	sta $d21f ; SKCTL, Right POKEY
	bcs cmd7f ; carry flag still set, unconditional
cmd7e
	sta $d20f ; SKCTL, Left POKEY 
	EIF
cmd7f
	lda trackn_note,x ; this is the expected variable in memory
	jmp cmd0a
	EIF
	IFT FEAT_COMMAND7VOLUMEONLY
cmd7a	; volume only mode
	lda trackn_audc,x
	ora #$f0
	sta trackn_audc,x
	lda trackn_note,x
	jmp cmd0a
	EIF
	EIF

cmd0
	lda trackn_note,x
	clc
	adc reg3

cmd0a
	IFT FEAT_TABLETYPE
	ldy trackn_tabletypespeed,x
	bmi cmd0b
	EIF
	clc
	adc trackn_tablenote,x
	cmp #61
	bcc cmd0a1
	lda #0
	sta trackn_audc,x
	lda #63

cmd0a1
	tay
	lda (nr),y
	clc
	adc trackn_shiftfrq,x
	IFT FEAT_COMMAND2
	clc
	adc frqaddcmd2
	EIF
	IFT FEAT_TABLETYPE
	jmp cmd0c

cmd0b
	cmp #61
	bcc cmd0b1
	lda #0
	sta trackn_audc,x
	lda #63

cmd0b1
	tay
	lda trackn_shiftfrq,x
	clc
	adc trackn_tablenote,x
	clc
	adc (nr),y
	IFT FEAT_COMMAND2
	clc
	adc frqaddcmd2
	EIF
	EIF
cmd0c
	sta trackn_audf,x

pp9
	IFT FEAT_PORTAMENTO
	lda trackn_portaspeeda,x
	beq pp10
	dec trackn_portaspeeda,x
	bne pp10
	lda trackn_portaspeed,x
	sta trackn_portaspeeda,x
	lda trackn_portafrqa,x
	cmp trackn_portafrqc,x
	beq pp10
	bcs pps1
	adc trackn_portadepth,x
	bcs pps8
	cmp trackn_portafrqc,x
	bcs pps8
	jmp pps9

pps1
	sbc trackn_portadepth,x
	bcc pps8
	cmp trackn_portafrqc,x
	bcs pps9

pps8
	lda trackn_portafrqc,x

pps9
	sta trackn_portafrqa,x

pp10
	lda reg2
	and #$01
	beq pp11
	lda trackn_portafrqa,x
	clc
	adc trackn_shiftfrq,x
	sta trackn_audf,x

pp11
	EIF

ppnext
	dex
	bmi rmt_p4
	jmp pp1

rmt_p4
	IFT FEAT_AUDCTLMANUALSET
	lda trackn_audctl+0
	ora trackn_audctl+1
	ora trackn_audctl+2
	ora trackn_audctl+3
	tax
	ELS
	ldx #0
	EIF

; Channel 1
filter_ch_1
	stx v_audctl
	IFT FEAT_FILTER
	IFT FEAT_FILTERG0L
	lda trackn_command+0
	bpl filter_ch_2
	lda trackn_audc+0
	and #$0f
	beq filter_ch_2
	lda trackn_audf+0
	clc
	adc trackn_filter+0
	sta trackn_audf+2
	txa
	ora #4
	tax
	EIF

; Channel 2
filter_ch_2
	IFT FEAT_FILTERG1L
	lda trackn_command+1
	bpl qq5
	lda trackn_audc+1
	and #$0f
	beq qq5
	lda trackn_audf+1
	clc
	adc trackn_filter+1
	sta trackn_audf+3
	txa
	ora #2
	tax
	EIF
	EIF

qq5
	stx v_audctl
	IFT TRACKS>4
	IFT FEAT_AUDCTLMANUALSET
	lda trackn_audctl+4
	ora trackn_audctl+5
	ora trackn_audctl+6
	ora trackn_audctl+7
	tax
	ELS
	ldx #0
	EIF

; Channel 1 Right
filter_ch_1_stereo	
	stx v_audctl2
	IFT FEAT_FILTER
	IFT FEAT_FILTERG0R
	lda trackn_command+0+4
	bpl filter_ch_2_stereo
	lda trackn_audc+0+4
	and #$0f
	beq filter_ch_2_stereo
	lda trackn_audf+0+4
	clc
	adc trackn_filter+0+4
	sta trackn_audf+2+4
	txa
	ora #4
	tax
	EIF


; Channel 2 Right
filter_ch_2_stereo
	IFT FEAT_FILTERG1R
	lda trackn_command+1+4
	bpl qs5
	lda trackn_audc+1+4
	and #$0f
	beq qs5
	lda trackn_audf+1+4
	clc
	adc trackn_filter+1+4
	sta trackn_audf+3+4
	txa
	ora #2
	tax
	EIF
	EIF

qs5
	stx v_audctl2
	EIF

rmt_p5
	IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
	lda #$ff

v_ainstrspeed equ *-1
	ELS
	lda #1
	EIF
	rts

SetPokey
	IFT STEREOMODE==0		; L1 L2 L3 L4, MONO (Mode 0)
	ldy v_audctl
	lda trackn_audf+0
	ldx trackn_audc+0
	sta $d200
	stx $d201
	lda trackn_audf+1
	ldx trackn_audc+1
	sta $d202
	stx $d203
	lda trackn_audf+2
	ldx trackn_audc+2
	sta $d204
	stx $d205
	lda trackn_audf+3
	ldx trackn_audc+3
	sta $d206
	stx $d207
	sty $d208

        IFT FEAT_IS_VISUALP==1
	lda v_skctl
	sta $d20f
	EIF

	ELI STEREOMODE==1		; L1 L2 L3 L4 R1 R2 R3 R4, STEREO (Mode 1)
	ldy v_audctl2
	lda trackn_audf+0+4
	ldx trackn_audf+0
	sta $d210
	stx $d200
	lda trackn_audc+0+4
	ldx trackn_audc+0
	sta $d211
	stx $d201
	lda trackn_audf+1+4
	ldx trackn_audf+1
	sta $d212
	stx $d202
	lda trackn_audc+1+4
	ldx trackn_audc+1
	sta $d213
	stx $d203
	lda trackn_audf+2+4
	ldx trackn_audf+2
	sta $d214
	stx $d204
	lda trackn_audc+2+4
	ldx trackn_audc+2
	sta $d215
	stx $d205
	lda trackn_audf+3+4
	ldx trackn_audf+3
	sta $d216
	stx $d206
	lda trackn_audc+3+4
	ldx trackn_audc+3
	sta $d217
	stx $d207
	lda v_audctl
	sty $d218
	sta $d208

        IFT FEAT_IS_VISUALP==1	
	lda v_skctl
	sta $d20f
	lda v_skctl2
	sta $d21f
	EIF
	
	ELI STEREOMODE==2		; L1 R2 R3 L4, STEREO (Mode 2)
	ldy v_audctl
	lda trackn_audf+0
	ldx trackn_audc+0
	sta $d200
	stx $d201
	sta $d210
	lda trackn_audf+1
	ldx trackn_audc+1
	sta $d210+2
	stx $d211+2
	lda trackn_audf+2
	ldx trackn_audc+2
	sta $d210+4
	stx $d211+4
	sta $d200+4
	lda trackn_audf+3
	ldx trackn_audc+3
	sta $d200+6
	stx $d201+6
	sta $d210+6
	sty $d218
	sty $d208
	
	ELI STEREOMODE==3		; L1 L2 R3 R4, STEREO (Mode 3)
	ldy v_audctl
	lda trackn_audf+0
	ldx trackn_audc+0
	sta $d200
	stx $d201
	lda trackn_audf+1
	ldx trackn_audc+1
	sta $d200+2
	stx $d201+2
	lda trackn_audf+2
	ldx trackn_audc+2
	sta $d210+4
	stx $d211+4
	sta $d200+4
	lda trackn_audf+3
	ldx trackn_audc+3
	sta $d210+6
	stx $d211+6
	sta $d200+6
	sty $d218
	sty $d208
	
	ELI STEREOMODE==4		; LR1 LR2 LR3 LR4, MONO (Mode 4)
	ldy v_audctl
	ldx trackn_audf+0
	stx $d200
	stx $d210
	ldx trackn_audc+0
        stx $d201
	stx $d211
	ldx trackn_audf+1
        stx $d202
	stx $d212
	ldx trackn_audc+1
        stx $d203
	stx $d213
	ldx trackn_audf+2
        stx $d204
	stx $d214
	ldx trackn_audc+2
        stx $d205
	stx $d215
	ldx trackn_audf+3
        stx $d206
	stx $d216
	ldx trackn_audc+3
        stx $d207
	stx $d217
        sty $d208
	sty $d218

        IFT FEAT_IS_VISUALP	
	lda v_skctl
	sta $d20f
	sta $d21f
	EIF
	EIF
	rts                     ; IMPORTANT TO NOT ACCIDENTALLY DELETE!

; Player ends here, what lies after is anything you want, and the extra workaround code if assembled as a 'tracker.obx' binary
; The workaround code is mandatory in order to avoid many things breaking in RMT!

RMTPLAYEREND
        IFT FEAT_IS_TRACKER
        org $3D00
InstrumentY2                    ; seems like they go hand in hand?
        sta trackn_note,x
        tya 
        asl @ 
        sta trackn_instrx2,x
        bmi SkipInstrumentY2
        tay 
        jmp SetUpInstrumentY2
SkipInstrumentY2       
        rts 

        org $3E00
SetInstrumentVolume             ; seems logical?
        :4 asl @ 
        sta trackn_volume,x
        rts 

        org $3E80
StopInstrument                  ; I think?
        lda #$00 
        sta trackn_volume,x
        sta trackn_instrhb,x
        sta trackn_instrdb,x
        sta trackn_audc,x
        rts 
        EIF

